list.files(recursive=TRUE)
scr
getInputs(scr)
debug(getInputs.language)
debug(CodeDepends:::getInputs.language)
getInputs(scr)
class(scr)
trace(getInputs, browser, signature="Script")
getInputs(scr)
n
e
class(e[[1]])
trace(CodeDepends:::getInputs.language, browser)
n
n
ans
c
library(DynDocModel)
q()
n
library(CodeDepends)
library(RUnit)
}
"
"
'
;
library(CodeDepends)
library(RUnit)
res
q()
n
library(CodeDepends)
library(RUnit)
objects("package:CodeDepends")
serialize
?serialize
x = serialize(list(1, 2, 3))
x = serialize(list(1, 2, 3), NULL)
x
?hash
??hash
library(digest)
digest(list(1,2, 3), algo = "md5")
digest(parse(text="x=5;\ny=17;plot(x,y)"), algo="md5")
digest(parse(text="x=5;y=17;plot(x,y)"), algo="md5")
parse(text="x=5;\ny=17;plot(x,y)")
parse(text="x=5;y=17;plot(x,y)")
identical(parse(text="x=5;\ny=17;plot(x,y)"), parse(text="x=5;y=17;plot(x,y)"))
?parse
as.list(
> library(digest)
> digest(list(1,2, 3), algo = "md5")
[1] "f1672e5bbdc229279086288b04061cbf"
> digest(parse(text="x=5;\ny=17;plot(x,y)"), algo="md5")
[1] "99f842e6c037acdc40
as.list(parse(text="x=5;\ny=17;plot(x,y)"))
as.listparse(text="x=5;y=17;plot(x,y)"))
as.list(parse(text="x=5;y=17;plot(x,y)"))
identical(as.listparse(text="x=5;y=17;plot(x,y)"))
identical(as.list(parse(text="x=5;y=17;plot(x,y)")), as.list(parse(text="x=5;\ny=17;plot(x,y)")))
?identical
unclass(parse(text="x=5;y=17;plot(x,y)"))
?as.list
as.character(parse(text="x=5;y=17;plot(x,y)"))
as.character(parse(text="x=5;\ny=17;plot(x,y)"))
digest(as.character(parse(text="x=5;\ny=17;plot(x,y)")))
digest(as.character(parse(text="x=5;y=17;plot(x,y)")))
digest(as.character(parse(text="x=5;\ny=17;plot( x    ,y )")))
deparse(parse(text="x=6;\nyoyo='hahahaha'"))
lapply(1:3, function(i) if(i==3)NULL else i)
sapply(1:3, function(i) if(i==3)NULL else i)
unlist(sapply(1:3, function(i) if(i==3)NULL else i))
getInputs(scr)
q()
n
library(CodeDepends)
debug(getInputs)
n
n
n
n
n
n
n
c
c
c
c
c
library(RUnit)
install.packages(RUnit)
install.packages("RUnit")
library(RUnit)
showMethods("getInputs)
")
showMethods("getInputs")
thing = parse(A~B)
thing = parse(text="A~B")
class(thing)
is.call(thing)
is.symbol(e[[1]])
is.symbol(thing[[1]])
thing[[1]]
debug(getInputs.language)
debug(CodeDepends:::getInputs.language)
c
c
undebug(getInputs)
c
debug(getInputs)
 res = getInputs(scr)[[2]] #fit = lm(b~a, data=df)
class(scr)
c
class(scr)
ls()
e
c
e
c
ls()
e
c
e
c
e
e
c
e
c
e
c
e
c
e
class(e)
e[[1]]
is.symbol(e[[1]])
c
c
c
c
c
q()
n
library(CodeDepends)
inputCollector
CodeDepends:::inputCollector
q()
n
