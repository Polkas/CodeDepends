x = serialize(list(1, 2, 3), NULL)
x
?hash
??hash
library(digest)
digest(list(1,2, 3), algo = "md5")
digest(parse(text="x=5;\ny=17;plot(x,y)"), algo="md5")
digest(parse(text="x=5;y=17;plot(x,y)"), algo="md5")
parse(text="x=5;\ny=17;plot(x,y)")
parse(text="x=5;y=17;plot(x,y)")
identical(parse(text="x=5;\ny=17;plot(x,y)"), parse(text="x=5;y=17;plot(x,y)"))
?parse
as.list(
> library(digest)
> digest(list(1,2, 3), algo = "md5")
[1] "f1672e5bbdc229279086288b04061cbf"
> digest(parse(text="x=5;\ny=17;plot(x,y)"), algo="md5")
[1] "99f842e6c037acdc40
as.list(parse(text="x=5;\ny=17;plot(x,y)"))
as.listparse(text="x=5;y=17;plot(x,y)"))
as.list(parse(text="x=5;y=17;plot(x,y)"))
identical(as.listparse(text="x=5;y=17;plot(x,y)"))
identical(as.list(parse(text="x=5;y=17;plot(x,y)")), as.list(parse(text="x=5;\ny=17;plot(x,y)")))
?identical
unclass(parse(text="x=5;y=17;plot(x,y)"))
?as.list
as.character(parse(text="x=5;y=17;plot(x,y)"))
as.character(parse(text="x=5;\ny=17;plot(x,y)"))
digest(as.character(parse(text="x=5;\ny=17;plot(x,y)")))
digest(as.character(parse(text="x=5;y=17;plot(x,y)")))
digest(as.character(parse(text="x=5;\ny=17;plot( x    ,y )")))
deparse(parse(text="x=6;\nyoyo='hahahaha'"))
lapply(1:3, function(i) if(i==3)NULL else i)
sapply(1:3, function(i) if(i==3)NULL else i)
unlist(sapply(1:3, function(i) if(i==3)NULL else i))
getInputs(scr)
q()
n
library(CodeDepends)
debug(getInputs)
n
n
n
n
n
n
n
c
c
c
c
c
library(RUnit)
install.packages(RUnit)
install.packages("RUnit")
library(RUnit)
showMethods("getInputs)
")
showMethods("getInputs")
thing = parse(A~B)
thing = parse(text="A~B")
class(thing)
is.call(thing)
is.symbol(e[[1]])
is.symbol(thing[[1]])
thing[[1]]
debug(getInputs.language)
debug(CodeDepends:::getInputs.language)
c
c
undebug(getInputs)
c
debug(getInputs)
 res = getInputs(scr)[[2]] #fit = lm(b~a, data=df)
class(scr)
c
class(scr)
ls()
e
c
e
c
ls()
e
c
e
c
e
e
c
e
c
e
c
e
c
e
class(e)
e[[1]]
is.symbol(e[[1]])
c
c
c
c
c
q()
n
library(CodeDepends)
inputCollector
CodeDepends:::inputCollector
q()
n
library(CodeDepends)
library(RUnit)
test_formula()
options(error=recoveR)
options(error=recover)
test_formula()
ls()
formulaInputs
e
q
Q
lapply(CodeDepends:::defaultFuncHandlers, trace)
test_formula()
0
q()
n
library(CodeDepends)
library(RUnit)
test_formula()
test_altoutput()
w = parse("assign('x', 5)")
w = parse(text="assign('x', 5)")
w
sapply(w, class)
sapply(w[[1]], class)
assign
?assign
z = parse(text="x<<-5")
z
sapply(z[[1]], class)
l = "x"
stuff = parse(text="assign(l, 5)")
sapply(stuff, class)
sapply(stuff[[1]], class)
is.name
is.symbol
q()
n
q(*)
q()
n
options(error=recover)
test_libsymbols()
body()
q()
n
q()
n
library(ggplot2)
?aes
?transform
help(transform, package="ggplot2")
?transform
?subset
?library(dplyr)
?filter
dplyr:::filter
help("filter", "dplyr")
vignette("nse")
?filter
p = parse(text="a %>% b %>% c %>% d")
p
sapply(p, class)
sapply(p[[1]], class)
p[[1]]
p[[1]][[1]]
p[[1]][[2]]
p[[1]][[3]]
p[[1]][[4]]
q()
n
"df %>% a %>% b %>% c"
txt = "df %>% a %>% b %>% c"
library(CodeDepends)
scr = readScript(,txt = txt)
scr
getInputs(scr)
getInputs(scr, "%>%" = CodeDepends:::pipehandler)
getInputs(scr, CodeDepends:::inputCollector("%>%" = CodeDepends:::pipehandler))
scr
debug(CodeDepends:::pipehandler)
getInputs(scr, CodeDepends:::inputCollector("%>%" = CodeDepends:::pipehandler))
n
e[[3]]
e[[2]]
n
n
n
n
getInputs(scr, CodeDepends:::inputCollector("%>%" = CodeDepends:::pipehandler))
n
n
n
class(e[[2]])
debug(getInputs)
n
n
n
n
debug(getInputs.language)
n
getInputs(scr, CodeDepends:::inputCollector("%>%" = CodeDepends:::pipehandler))
c
c
c
c
undebug(getInputs)
trace(getInputs, browser, signature="ANY")
getInputs(scr, CodeDepends:::inputCollector("%>%" = CodeDepends:::pipehandler))
n
n
debug(.local)
n
e
n
n
n
n
n
n
as.character(e[[1]])
n
n
n
n
n
debug(.local)
n
e
Q
q()
n
txt = "df %>% a %>% b %>% c"
library(CodeDepends)
scr = readScript(,txt = txt)
scr
getInputs(scr)
q()
n
library(dplyr)
count
data_frame
distinct
funs
count
mutate
mutate_each
transmut
transmute
rename
slice
summarise
summarise_each
arrange
select
group_by
group_indices
data_frame
distinct
do
funs
count
source("~/gabe/checkedout/dplyr_example/load_marchmania2015.R")
ls()
group_by
sapply(parse(text="c(x, y=5, z=w+5)"), names)
count
?count
q()
n
library(CodeDepends)
scr = readScript("~/gabe/checkedout/dplyr_example/load_marchmania2015.R")
scr
getInputs(scr)
options(error=recover)
getInputs(scr)
body()
update
2
update
ls()
ls()
q()
n
library(CodeDepends)
scr = readScript("~/gabe/checkedout/dplyr_example/load_marchmania2015.R")
scr
getInputs(scr)
scr[[69]]
library(devtools)
install("~/gabe/checkedout/CodeDepends")
q()
n
library(CodeDepends)
scr = readScript("~/gabe/checkedout/dplyr_example/load_marchmania2015.R")
ins
scr[[64]]
ins[[64]]
last
debug(getInputs.language)
debug(CodeDepends:::getInputs.language)
getInputs(scr[[64]])
trace(getInputs.language, where = "package:CodeDepends")
trace(getInputs, browser, signature="ANY")
getInputs(scr[[64]])
n
n
debug(.local)
n
e
c
n
n
n
e
c
e
ls()
list(...)
Q
q()
n
library(dplyr)
summarise
dplyr:::summarise_
methods("summarise_")
dplyr:::summarise_.data.frame
dplyr:::summarise_.tbl_df
dplyr:::summarise_impl
?summarise
n_distinct
first
last
n
q()
n
q()
n
`::`
class(parse(text = "dplyr::summarise"))
class(parse(text = "dplyr::summarise")[[1]])
estuff = parse(text = "dplyr::summarise")[[1]]
estuff[[1]]
estuff[[2]]
estuff = parse(text = "dplyr::summarise(x,y,thang")[[1]]
estuff = parse(text = "dplyr::summarise(x,y,thang)")[[1]]
estuff
estuff[[3]]
estuff[[1]]
estuff[[1]][[1]]
estuff[[1]][[3]]
estuff[[1]][[4]]
length(estuff)
estuff
estuff[[1]]
estuff[[2]]
class(estuff[[1]])
q()
n
library(CodeDepends)
readScript
rnorm
getwd()
library(CodeDepends)
scr = readScript("testcode/inputtest5.R")
scr
getInputs(scr)
stuff = parse(text="stats::rnorm(x,y)")
stuff[[1]]
stuff = parse(text="stats::rnorm(x,y)")[[1]]
length(stuff)
stuff[[3]]
stuff[[2]]
stuff[[1]]
classt(stuff)
class(stuff)
class(e[[1]])
class(stuff[[1]])
as.character(stuff)
stuff[[1]]
stuff[[1]][[1]]
stuff[[1]][[2]]
q()
n
library(CodeDepends)
library(RUnit)
scr
src
res
q()
n
library(CodeDepends)
res
readLines("testcode/inputtest1.R")
library(RUnit)
res
}
scr
scr2
ls()
res
scr
scr = readScript("../examples/disjoint.R")
getwd()
scr = readScript("../samples/disjoint.R")
scr
info = getInputs(scr)
info
length(info)
getDependsThread("z", info = info)
getDependsThread("z", info = info)
info
getDependsThread
getDependsThread("w", info, TRUE)
trace(getDependsThread, signature = "character", browser)
getDependsThread("w", info, TRUE)
n
n
expr
n
n
position
var
debug(findLastDef)
findLastDef("z", info)
c
c
getDependsThread("z", info, TRUE)
c
c
getDependsThread("z", info, TRUE)
n
n
n
w
n
n
last
n
Q
getDependsThread("z", info, TRUE)
c
scr
getDependsThread(7, info = info)
getDependsThread("foo(o)", info = info)
c
info
info[[7]]@code
class(info[[7]]@code)
e = parse(text = "foo(o)")
e
e[[1]]
identical(info[[7]]@code, e[[1]])
getDependsThread("foo(o)", info = info)
getDependsThread(9)
getDependsThread(9, info = info)
getDependsThread("z", info = info)
write_PACKAGES
library(tools)
write_PACKAGES
tools:::.build_repository_package_db
thing = read.dcf("http://restst.gene.com/gran/devel/src/contrib/PACKAGES")
thing = read.dcf(url("http://restst.gene.com/gran/devel/src/contrib/PACKAGES"))
thing
colnames(thing)
;lajkdf
library(CodeDepends)
things = lapply(list.files("~/gabe/checkedout/SlothClient/R/", pattern = ".R$", full.names=TRUE), readScript)
length(things)
things
stuffnstuff = lapply(things, getInputs)
stuffnstuff
allfuns = unique(unlist(lapply(stuffnstuff, function(x) x@functions)))
allfuns = unique(unlist(lapply(stuffnstuff, function( y) lapply(y, function(x) x@functions))))
allfuns
allfuns = unique(unlist(lapply(stuffnstuff, function( y) lapply(y, function(x) names(x@functions)))))
allfuns
allfuns = unique(unlist(lapply(stuffnstuff, function( y) lapply(y, function(x) names(x@functions)[x@functions]))))
allfuns
allfuns = unique(unlist(lapply(stuffnstuff, function( y) lapply(y, function(x) names(x@functions)[!x@functions]))))
allfuns
any(c("exit", "fork", "getpid", "handleSIGCLD", "kill", "killall", "restorSIGCLD", "signal", "signame", "sigval", "siglist", "wait") %in% allfuns)
q()
n
q()
n
q()
n 
